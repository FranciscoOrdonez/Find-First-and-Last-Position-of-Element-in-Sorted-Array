Find First and Last Position of Element in Sorted Array
#approach 1: 1000000 iteration with 8.46 seconds
def searchRange(nums, target):
    def search_left(nums, target):
        l, r = 0, len(nums) - 1
        
        while l <= r:
            m = (l + r) // 2
            if nums[m] >= target:
                r = m - 1
            else:
                l = m + 1
        return l

    def search_right(nums, target):
        l, r = 0, len(nums) - 1
        while l <= r:
            m = (l + r) // 2
            if nums[m] <= target:
                l = m + 1
            else:
                r = m - 1
        return r

    l = search_left(nums, target)
    if l == len(nums) or nums[l] != target:
        return [-1, -1]
    r = search_right(nums, target)
    return [l, r]



import time

# get the start time
st = time.time()

for i in range(1000000):
    
    nums = [5,7,7,7,7,7,8,8,10,11]  
    target = 8
    searchRange(nums, target)  #answer = [6,7]

    nums = []
    target = 1
    searchRange(nums,target)  #answer = [-1,-1]

    nums = [5,7,7,7,7,7,8,8,10,11]
    target = 12
    searchRange(nums,target) #answer = [-1,-1]

    nums = [5,7,7,8,8,10]
    target = 8
    searchRange(nums, target)  #answer = [3,4]
    
# get the end time
et = time.time()

# get the execution time
elapsed_time = (et - st)*1000.000000000
print('Execution time:', elapsed_time, 'milliseconds')
